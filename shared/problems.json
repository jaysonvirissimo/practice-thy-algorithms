{
  "two_sum": {
    "title": "Two Sum",
    "description": "Implement a function that locates a pair of elements within an integer array whose sum equals a specified target value. The function should return the array indices of these two elements. Assume exactly one valid pair exists and that no element may be used twice in the solution.",
    "complexity": "O(n)",
    "parameters": [
      {
        "name": "array",
        "type": "array<integer>",
        "description": "Array of integers"
      },
      {
        "name": "target",
        "type": "integer",
        "description": "Target sum"
      }
    ],
    "returnType": {
      "javascript": "array<integer>",
      "ruby": "array<integer>",
      "python": "list<integer>"
    },
    "functionSignatures": {
      "javascript": "function twoSum(nums, target)",
      "ruby": "def two_sum(nums, target)",
      "python": "def two_sum(nums, target)"
    },
    "testCases": [
      {
        "input": {
          "nums": [2, 7, 11, 15],
          "target": 9
        },
        "expected": [0, 1],
        "description": "should return indices [0, 1] because nums[0] + nums[1] = 2 + 7 = 9"
      },
      {
        "input": {
          "nums": [3, 2, 4],
          "target": 6
        },
        "expected": [1, 2],
        "description": "should return indices [1, 2] because nums[1] + nums[2] = 2 + 4 = 6"
      },
      {
        "input": {
          "nums": [3, 3],
          "target": 6
        },
        "expected": [0, 1],
        "description": "should return indices [0, 1] because nums[0] + nums[1] = 3 + 3 = 6"
      }
    ]
  },
  "maximum_subarray": {
    "title": "Maximum Subarray",
    "description": "Design an algorithm to determine the maximum sum achievable from any contiguous subsequence within an array of integers. The array contains both positive and negative values. While a brute-force approach examining all possible subarrays runs in O(nÂ²) time, strive for an optimal O(n) solution using constant space.",
    "complexity": "O(n)",
    "parameters": [
      {
        "name": "array",
        "type": "array<integer>",
        "description": "Array of integers (positive and negative)"
      }
    ],
    "returnType": {
      "javascript": "integer",
      "ruby": "integer",
      "python": "integer"
    },
    "functionSignatures": {
      "javascript": "function maximumSubarray(numbers)",
      "ruby": "def maximum_subarray(array)",
      "python": "def maximum_subarray(array)"
    },
    "testCases": [
      {
        "input": {
          "array": [4, -1, 5, 6, -13, 2]
        },
        "expected": 14,
        "description": "should return the largest subsum"
      },
      {
        "input": {
          "array": [-2, 1, -3, 4, -1, 2, 1, -5, 4]
        },
        "expected": 6,
        "description": "should return the largest subsum"
      }
    ]
  },
  "unique_paths": {
    "title": "Unique Paths",
    "description": "Develop a recursive algorithm to count the total number of distinct shortest paths through a rectangular grid from the top-left corner to the bottom-right corner. Movement is restricted to rightward and downward steps only. Implement memoization to optimize the recursive solution and avoid redundant calculations.",
    "complexity": "O(m*n)",
    "parameters": [
      {
        "name": "rows",
        "type": "integer",
        "description": "Number of rows in the grid"
      },
      {
        "name": "columns",
        "type": "integer",
        "description": "Number of columns in the grid"
      }
    ],
    "returnType": {
      "javascript": "integer",
      "ruby": "integer",
      "python": "integer"
    },
    "functionSignatures": {
      "javascript": "function uniquePaths(rows, columns)",
      "ruby": "def unique_paths(rows, columns)",
      "python": "def unique_paths(rows, columns)"
    },
    "testCases": [
      {
        "input": {
          "rows": 3,
          "columns": 7
        },
        "expected": 28,
        "description": "should return 28 unique paths for 3x7 grid"
      },
      {
        "input": {
          "rows": 4,
          "columns": 12
        },
        "expected": 364,
        "description": "should return 364 unique paths for 4x12 grid"
      },
      {
        "input": {
          "rows": 5,
          "columns": 15
        },
        "expected": 3060,
        "description": "should return 3060 unique paths for 5x15 grid"
      }
    ]
  },
  "coin_change": {
    "title": "Coin Change",
    "description": "Construct an algorithm that determines the minimum number of coins needed to make change for a given monetary amount. Given a set of coin denominations and a target amount, return an array containing the specific coins that sum to the target using the fewest possible coins. Implement this as a classic dynamic programming optimization problem.",
    "complexity": "O(amount * coins)",
    "parameters": [
      {
        "name": "amount",
        "type": "integer",
        "description": "Target monetary amount to make change for"
      },
      {
        "name": "coins",
        "type": "array<integer>",
        "description": "Available coin denominations (optional, defaults to [1, 5, 10, 25])"
      }
    ],
    "returnType": {
      "javascript": "array<integer>",
      "ruby": "array<integer>",
      "python": "list<integer>"
    },
    "functionSignatures": {
      "javascript": "function coinChange(amount, coins = [1, 5, 10, 25])",
      "ruby": "def coin_change(amount, coins = [1, 5, 10, 25])",
      "python": "def coin_change(amount, coins = [1, 5, 10, 25])"
    },
    "testCases": [
      {
        "input": {
          "amount": 36,
          "coins": [1, 5, 10, 25]
        },
        "expected": [25, 10, 1],
        "description": "should return [25, 10, 1] using minimum 3 coins for 36 cents"
      },
      {
        "input": {
          "amount": 43,
          "coins": [1, 5, 10, 25]
        },
        "expected": [25, 10, 5, 1, 1, 1],
        "description": "should return [25, 10, 5, 1, 1, 1] using minimum 6 coins for 43 cents"
      },
      {
        "input": {
          "amount": 67,
          "coins": [1, 5, 10, 25]
        },
        "expected": [25, 25, 10, 5, 1, 1],
        "description": "should return [25, 25, 10, 5, 1, 1] using minimum 6 coins for 67 cents"
      }
    ]
  }
}